/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;

using System.Reflection;
using Newtonsoft.Json.Serialization;
using System.Diagnostics.CodeAnalysis;



namespace Konya_Hiermayer.Packages.Services.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(HopJsonConverter))]
    public partial class Hop 
    { 
        /// <summary>
        /// Gets or Sets HopType
        /// </summary>
        [Required]
        [DataMember(Name="hopType")]
        public string HopType { get; set; }

        /// <summary>
        /// Unique CODE of the hop.
        /// </summary>
        /// <value>Unique CODE of the hop.</value>
        [Required]
        [DataMember(Name="code")]
        public string Code { get; set; }

        /// <summary>
        /// Description of the hop.
        /// </summary>
        /// <value>Description of the hop.</value>
        [Required]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Delay processing takes on the hop.
        /// </summary>
        /// <value>Delay processing takes on the hop.</value>
        [Required]
        [DataMember(Name="processingDelayMins")]
        public int? ProcessingDelayMins { get; set; }

        /// <summary>
        /// Name of the location (village, city, ..) of the hop.
        /// </summary>
        /// <value>Name of the location (village, city, ..) of the hop.</value>
        [Required]
        [DataMember(Name="locationName")]
        public string LocationName { get; set; }

        /// <summary>
        /// Gets or Sets LocationCoordinates
        /// </summary>
        [Required]
        [DataMember(Name="locationCoordinates")]
        public GeoCoordinate LocationCoordinates { get; set; }
    }
    public class HopJsonConverter : JsonCreationConverter<Hop>
    {
        protected override Hop Create(Type objectType, JObject jObject)
        {
            // if (jObject == null) throw new ArgumentNullException("jObject");

            // string hoptype = jObject["hopType"].Value<string>().ToLower();
            
            // if(hoptype == "warehouse")return new Warehouse();
            // else if(hoptype == "truck")return new Truck();
            // else if(hoptype == "transferwarehouse")return new Transferwarehouse();

            // return new Hop();
             try
            {
                if (jObject["numberPlate"] != null)
                {
                    return new Truck();
                }
                else if (jObject["level"] != null)
                {
                    return new Warehouse();
                }
                else if (jObject["logisticsPartner"] != null)
                {
                    return new Transferwarehouse();
                }
                else
                {
                    return new Hop();
                }
            }
            catch (Exception e)
            {

                 throw new Exception();
            }
         
        }
    }
    public abstract class JsonCreationConverter<T> : JsonConverter
    {
        public override bool CanWrite
        {
            get
            {
                return false;
            }
        }

        protected abstract T Create(Type objectType, JObject jObject);

        public override bool CanConvert(Type objectType)
        {
            return typeof(T).IsAssignableFrom(objectType);
        }


        // public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        // {
        //     if (reader == null) throw new ArgumentNullException("reader");
        //     if (serializer == null) throw new ArgumentNullException("serializer");
        //     if (reader.TokenType == JsonToken.Null)
        //         return null;

        //     JObject jObject = JObject.Load(reader);
        //     T target = Create(objectType, jObject);
        //     serializer.Populate(jObject.CreateReader(), target);
        //     return target;
        // }
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
        if (reader == null) throw new ArgumentNullException("reader");
        if (serializer == null) throw new ArgumentNullException("serializer");
        if (reader.TokenType == JsonToken.Null)
            return null;

        JObject jObject = JObject.Load(reader);
        T target = Create(objectType, jObject);
        serializer.Populate(jObject.CreateReader(), target);
        return target;
    }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new NotImplementedException();
        }
    }
}
