/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Konya_Hiermayer.Packages.Services.Attributes;
using Microsoft.AspNetCore.Authorization;
using Konya_Hiermayer.Packages.Services.Models;
using AutoMapper;
using Konya_Hiermayer.Packages.BL.Interfaces;
using Business = Konya_Hiermayer.Packages.BL.Entities;
using Microsoft.Extensions.Logging;
using Konya_Hiermayer.Packages.BL.Entities.Exceptions;
using Konya_Hiermayer.Packages.Services.Models.Exceptions;

namespace Konya_Hiermayer.Packages.Services.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ParcelWebhookApiController : ControllerBase
    { 
        private readonly IMapper mapper;
        private readonly IWebhookLogic webhookLogic;
        private readonly ILogger<ParcelWebhookApiController> logger;

        public ParcelWebhookApiController(IMapper mapper, IWebhookLogic webhookLogic, ILogger<ParcelWebhookApiController> logger)
        {
            this.mapper = mapper;
            this.webhookLogic = webhookLogic;
            this.logger = logger;
        }
        /// <summary>
        /// Get all registered subscriptions for the parcel webhook.
        /// </summary>
        /// <param name="trackingId"></param>
        /// <response code="200">List of webooks for the &#x60;trackingId&#x60;</response>
        /// <response code="404">No parcel found with that tracking ID.</response>
        [HttpGet]
        [Route("/parcel/{trackingId}/webhooks")]
        [ValidateModelState]
        [SwaggerOperation("ListParcelWebhooks")]
        [SwaggerResponse(statusCode: 200, type: typeof(WebhookResponses), description: "List of webooks for the &#x60;trackingId&#x60;")]
        public virtual IActionResult ListParcelWebhooks([FromRoute][Required][RegularExpression("^[A-Z0-9]{9}$")]string trackingId)
        { 
            try
            {
                logger.LogInformation($"Getting a List of the webhooks for Parcel {trackingId}");
                List<Business.Webhook> webhookResponseList = webhookLogic.GetAllSubscriptionsFromParcel(trackingId);
                List<WebhookResponse> response = new List<WebhookResponse>();
                webhookResponseList.ForEach(resp => response.Add(this.mapper.Map<WebhookResponse>(resp)));
                return new OkObjectResult(response);
            }
            catch(BusinessLayerException e)
            {
                throw new ServiceLayerException("BL Exception", e);
            }
        }

        /// <summary>
        /// Subscribe to a webhook notification for the specific parcel.
        /// </summary>
        /// <param name="trackingId"></param>
        /// <param name="url"></param>
        /// <response code="200">Successful response</response>
        /// <response code="404">No parcel found with that tracking ID.</response>
        [HttpPost]
        [Route("/parcel/{trackingId}/webhooks")]
        [ValidateModelState]
        [SwaggerOperation("SubscribeParcelWebhook")]
        [SwaggerResponse(statusCode: 200, type: typeof(WebhookResponse), description: "Successful response")]
        public virtual IActionResult SubscribeParcelWebhook([FromRoute][Required][RegularExpression("^[A-Z0-9]{9}$")]string trackingId, [FromQuery][Required()]string url)
        { 
            try
            {
                logger.LogInformation($"Subscribing to Parcel {trackingId} with URL {url}");
                webhookLogic.SubscribeToParcel(trackingId, url);
                return StatusCode(200);
            }
            catch (BusinessLayerException e)
            {
                throw new ServiceLayerException("BL Exception", e);
            }
        }

        /// <summary>
        /// Remove an existing webhook subscription.
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">Success</response>
        /// <response code="404">Subscription does not exist.</response>
        [HttpDelete]
        [Route("/parcel/webhooks/{id}")]
        [ValidateModelState]
        [SwaggerOperation("UnsubscribeParcelWebhook")]
        public virtual IActionResult UnsubscribeParcelWebhook([FromRoute][Required]long? id)
        { 
            try
            {
                logger.LogInformation($"Unsubscribing from webhook {id}");
                webhookLogic.UnsubscribeFromParcel(id);
                return StatusCode(200);
            }
            catch (BusinessLayerException e)
            {
                throw new ServiceLayerException("BL Exception", e);
            }
        }
    }
}
