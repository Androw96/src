/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Konya_Hiermayer.Packages.Services.Attributes;
using Microsoft.AspNetCore.Authorization;
using Konya_Hiermayer.Packages.Services.Models;
using AutoMapper;
using Konya_Hiermayer.Packages.BL.Interfaces;
using Business = Konya_Hiermayer.Packages.BL.Entities;
using Microsoft.Extensions.Logging;
using Konya_Hiermayer.Packages.BL.Entities.Exceptions;
using Konya_Hiermayer.Packages.Services.Models.Exceptions;

namespace Konya_Hiermayer.Packages.Services.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class WarehouseManagementApiController : ControllerBase
    { 
        private readonly IMapper mapper;
        private readonly IWarehouseManagementLogic warehouseManagementLogic;
        private readonly ILogger<WarehouseManagementApiController> logger;

        public WarehouseManagementApiController(IMapper mapper, IWarehouseManagementLogic warehouseManagementLogic, ILogger<WarehouseManagementApiController> logger)
        {
            this.mapper = mapper;
            this.warehouseManagementLogic = warehouseManagementLogic;
            this.logger = logger;
        }
        /// <summary>
        /// Exports the hierarchy of Warehouse and Truck objects. 
        /// </summary>
        /// <response code="200">Successful response</response>
        /// <response code="400">An error occurred loading.</response>
        /// <response code="404">No hierarchy loaded yet.</response>
        [HttpGet]
        [Route("/warehouse")]
        [ValidateModelState]
        [SwaggerOperation("ExportWarehouses")]
        [SwaggerResponse(statusCode: 200, type: typeof(Warehouse), description: "Successful response")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "An error occurred loading.")]
        public virtual IActionResult ExportWarehouses()
        { 
            try
            {
                logger.LogInformation("Exporting warehouse hierarchy");
                Business.Warehouse wh = this.warehouseManagementLogic.ExportWarehouse();
                Warehouse wareHouse = this.mapper.Map<Warehouse>(wh);
                return StatusCode(200, wareHouse);
            }
            catch (BusinessLayerException e)
            {
                throw new ServiceLayerException("BL Exception", e);
            }
        }

        /// <summary>
        /// Get a certain warehouse or truck by code
        /// </summary>
        /// <param name="code"></param>
        /// <response code="200">Successful response</response>
        /// <response code="400">An error occurred loading.</response>
        /// <response code="404">No hop with the specified id could be found.</response>
        [HttpGet]
        [Route("/warehouse/{code}")]
        [ValidateModelState]
        [SwaggerOperation("GetWarehouse")]
        [SwaggerResponse(statusCode: 200, type: typeof(Hop), description: "Successful response")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "An error occurred loading.")]
        public virtual IActionResult GetWarehouse([FromRoute][Required]string code)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Hop));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            


            try
            {
                logger.LogInformation("Exporting warehouse hierarchy");
                Business.Warehouse wh = this.warehouseManagementLogic.ExportWarehouseCode(code);
                Warehouse wareHouse = this.mapper.Map<Warehouse>(wh);
                return StatusCode(200, wareHouse);
            }
            catch (BusinessLayerException e)
            {
                throw new ServiceLayerException("BL Exception", e);
            }
            /*
            string exampleJson = null;
            exampleJson = "{\n  \"code\" : \"code\",\n  \"locationName\" : \"locationName\",\n  \"processingDelayMins\" : 0,\n  \"hopType\" : \"hopType\",\n  \"description\" : \"description\",\n  \"locationCoordinates\" : {\n    \"lon\" : 1.4658129805029452,\n    \"lat\" : 6.027456183070403\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Hop>(exampleJson)
                        : default(Hop);            //TODO: Change the data returned
            return new ObjectResult(example);

*/



             
        }

        /// <summary>
        /// Imports a hierarchy of Warehouse and Truck objects. 
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Successfully loaded.</response>
        /// <response code="400">The operation failed due to an error.</response>
        [HttpPost]
        [Route("/warehouse")]
        [ValidateModelState]
        [SwaggerOperation("ImportWarehouses")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "The operation failed due to an error.")]
        public virtual IActionResult ImportWarehouses([FromBody]Warehouse body)
        { 
            try
            {
                logger.LogInformation("Importing warehouse hierarchy");
                Business.Warehouse import = this.mapper.Map<Business.Warehouse>(body);
                this.warehouseManagementLogic.ImportWarehouse(import);
                return StatusCode(200);
            }
            catch (BusinessLayerException e)
            {
                throw new ServiceLayerException("BL Exception", e);
            }
        }
    }
}
